// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id            String     @id @default(uuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?    // Add password field for authentication
  role          String     @default("user") // Role field with default value
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  products      Product[]
  kabayanSpotlights KabayanSpotlight[]
  lifestyleArticles LifestyleArticle[]
  newsArticles NewsArticle[]
  advertisements     Advertisement[] 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())  
}


model Account {
  id                 String   @id @default(uuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
}


model Event {
  id          String   @id @default(uuid()) 
  title       String
  description String
  date        DateTime
  time        String   
  address     String   
  imageUrl    String?  
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())  
}

model Product {
  id            String   @id @default(uuid())
  name          String
  description   String
 category    String   @default("uncategorized") 
  price         Float
  contactEmail  String? 
  contactPhone  String? 
  imageUrl      String? 
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())  
}


model KabayanSpotlight {
   id        String   @id @default(uuid()) 
  title       String
  content     String
  imageUrl    String?  // Optional image URL for the spotlight article
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())  
}

model LifestyleArticle {
   id        String   @id @default(uuid()) 
  title       String
  content     String
  imageUrl    String?  // Optional image URL for the lifestyle article
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())  
}

model NewsArticle {
  id        String   @id @default(uuid()) 
  title       String
  contentUrl  String 
  newsSummary   String
  date        DateTime
  source      String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())  
}

model Advertisement {
  id        String   @id @default(uuid()) 
  title       String
  description  String 
  category   String
  imageUrl    String?  
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())  
}